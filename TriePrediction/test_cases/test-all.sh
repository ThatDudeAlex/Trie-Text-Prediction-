#!/bin/bash


# Sean Szumlanski
# COP 3502, Fall 2017

# ===========================
# TriePrediction: test-all.sh
# ===========================
# You can run this script at the command line like so:
#
#   bash test-all.sh
#
# For more details, see the assignment PDF.


################################################################################
# Initialization.
################################################################################

NUM_TEST_CASES=9
NUM_UNIT_TESTS=7
PASS_CNT=0
TOTAL_TEST_CNT=0

if [ ! -f test_launcher_std.c ]; then
	echo ""
	echo " Error: You must place test_launcher_std.c in this directory"
	echo "        before we can proceed. Aborting test script."
	echo ""
	exit
elif [ ! -f test_launcher_unit.c ]; then
	echo ""
	echo " Error: You must place test_launcher_unit.c in this directory"
	echo "        before we can proceed. Aborting test script."
	echo ""
	exit
elif [ ! -f TriePrediction.h ]; then
	echo ""
	echo " Error: You must place TriePrediction.h in this directory"
	echo "        before we can proceed. Aborting test script."
	echo ""
	exit
elif [ ! -f TriePrediction.c ]; then
	echo ""
	echo " Error: You must place TriePrediction.c in this directory"
	echo "        before we can proceed. Aborting test script."
	echo ""
	exit
elif [ ! -d sample_output ]; then
	echo ""
	echo " Error: You must place the sample_output folder in this"
	echo "        this directory before we can proceed. Aborting"
	echo "        test script."
	echo ""
	exit
fi


################################################################################
# Run test cases with input specified at command line (standard test cases).
################################################################################

TOTAL_TEST_CNT=`expr $TOTAL_TEST_CNT + $NUM_TEST_CASES`

echo ""
echo "=============================="
echo "Running standard test cases..."
echo "=============================="
echo ""

for i in `seq -f "%02g" 1 $NUM_TEST_CASES`;
do
	echo -n "  [Test Case] ./a.out corpus$i.txt input$i.txt ... "

	# Attempt to compile.
	gcc TriePrediction.c test_launcher_std.c 2> /dev/null
	compile_val=$?
	if [[ $compile_val != 0 ]]; then
		echo "fail (failed to compile)"
		continue
	fi

	# Run program. Capture return value to check whether it crashes.
	./a.out corpus$i.txt input$i.txt > myoutput$i.txt 2> /dev/null
	execution_val=$?
	if [[ $execution_val != 0 ]]; then
		echo "fail (program crashed)"
		continue
	fi

	# Run diff and capture its return value.
	diff myoutput$i.txt sample_output/output$i.txt > /dev/null
	diff_val=$?
	
	# Output results based on diff's return value.
	if  [[ $diff_val != 0 ]]; then
		echo "fail (output does not match)"
	else
		echo "PASS!"
		PASS_CNT=`expr $PASS_CNT + 1`
	fi
done

# Clean up the output files generated by these test cases.
for i in `seq -f "%02g" 1 $NUM_TEST_CASES`;
do
	rm -f myoutput$i.txt
done

rm -f a.out


################################################################################
# Run unit tests.
################################################################################

TOTAL_TEST_CNT=`expr $TOTAL_TEST_CNT + $NUM_UNIT_TESTS`

echo ""
echo "=========================="
echo "Running unit test cases..."
echo "=========================="
echo ""

for i in `seq -f "%02g" 1 $NUM_UNIT_TESTS`;
do
	echo -n "  [Unit Test] unit_test$i.c ... "

	# Attempt to compile.
	gcc TriePrediction.c test_launcher_unit.c unit_test$i.c 2> /dev/null
	compile_val=$?
	if [[ $compile_val != 0 ]]; then
		echo "fail (failed to compile)"
		continue
	fi

	# Run program. Capture return value to check whether it crashes.
	./a.out > myoutput$i.txt 2> /dev/null
	execution_val=$?
	if [[ $execution_val != 0 ]]; then
		echo "fail (program crashed)"
		continue
	fi

	# Run diff and capture its return value.
	diff myoutput$i.txt sample_output/unit_output$i.txt > /dev/null
	diff_val=$?
	
	# Output results based on diff's return value.
	if  [[ $diff_val != 0 ]]; then
		echo "fail (output does not match)"
	else
		echo "PASS!"
		PASS_CNT=`expr $PASS_CNT + 1`
	fi
done

# Clean up the output files generated by these test cases.
for i in `seq -f "%02g" 1 $NUM_UNIT_TESTS`;
do
	rm -f myoutput$i.txt
done

rm -f a.out


################################################################################
# Check for memory leaks: run standard test cases through valgrind.
################################################################################

TOTAL_TEST_CNT=`expr $TOTAL_TEST_CNT + $NUM_TEST_CASES`

echo ""
echo "==================================================="
echo "Checking for memory leaks in standard test cases..."
echo "==================================================="
echo ""

for i in `seq -f "%02g" 1 $NUM_TEST_CASES`;
do
	echo -n "  [Test Case] ./a.out corpus$i.txt input$i.txt ... "

	# Attempt to compile.
	gcc TriePrediction.c test_launcher_std.c 2> /dev/null
	compile_val=$?
	if [[ $compile_val != 0 ]]; then
		echo "fail (failed to compile)"
		continue
	fi

	# Run program through valgrind. Check output for indication of memory leaks.
	valgrind --leak-check=yes ./a.out corpus$i.txt input$i.txt > myoutput$i.txt 2> err.log
	grep --silent "no leaks are possible" err.log
	valgrindfail=$?

	if [[ $valgrindfail != 0 ]]; then
		echo "fail (memory leak detected)"
	else
		echo "PASS!"
		PASS_CNT=`expr $PASS_CNT + 1`
	fi
done

# Clean up the output files generated by these test cases.
for i in `seq -f "%02g" 1 $NUM_TEST_CASES`;
do
	rm -f myoutput$i.txt
done

rm -f a.out
rm -f err.log


################################################################################
# Check for memory leaks: run unit tests through valgrind.
################################################################################

TOTAL_TEST_CNT=`expr $TOTAL_TEST_CNT + $NUM_UNIT_TESTS`

echo ""
echo "==============================================="
echo "Checking for memory leaks in unit test cases..."
echo "==============================================="
echo ""

for i in `seq -f "%02g" 1 $NUM_UNIT_TESTS`;
do
	echo -n "  [Unit Test] unit_test$i.c ... "

	# Attempt to compile.
	gcc TriePrediction.c test_launcher_unit.c unit_test$i.c 2> /dev/null
	compile_val=$?
	if [[ $compile_val != 0 ]]; then
		echo "fail (failed to compile)"
		continue
	fi

	# Run program through valgrind. Check output for indication of memory leaks.
	valgrind --leak-check=yes ./a.out > myoutput$i.txt 2> err.log
	grep --silent "no leaks are possible" err.log
	valgrindfail=$?

	if [[ $valgrindfail != 0 ]]; then
		echo "fail (memory leak detected)"
	else
		echo "PASS!"
		PASS_CNT=`expr $PASS_CNT + 1`
	fi
done

# Clean up the output files generated by these test cases.
for i in `seq -f "%02g" 1 $NUM_UNIT_TESTS`;
do
	rm -f myoutput$i.txt
done

rm -f a.out
rm -f err.log


################################################################################
# Cleanup phase.
################################################################################

# n/a


################################################################################
# Final thoughts.
################################################################################

echo ""
echo "================================================================"
echo "Final Report"
echo "================================================================"

if [ $PASS_CNT -eq $TOTAL_TEST_CNT ]; then
	echo ""
	echo "  CONGRATULATIONS! You appear to be passing all the test cases!"
	echo "  (Now, don't forget to create some of your own. Mine are not"
	echo "  comprehensive.)"
	echo ""
	echo "================================================================"
	echo "Percy Shelley's \"Ozymandias\" (from corpus07.txt)"
	echo "================================================================"
	echo ""
	echo "  I met a traveller from an antique land"
	echo "  Who said: Two vast and trunkless legs of stone"
	echo "  Stand in the desert... near them, on the sand,"
	echo "  Half sunk, a shattered visage lies, whose frown,"
	echo "  And wrinkled lip, and sneer of cold command,"
	echo "  Tell that its sculptor well those passions read"
	echo "  Which yet survive, stamped on these lifeless things,"
	echo "  The hand that mocked them and the heart that fed:"
	echo ""
	echo "  And on the pedestal these words appear:"
	echo "  'My name is Ozymandias, king of kings:"
	echo "  Look on my works, ye Mighty, and despair!'"
	echo "  Nothing beside remains. Round the decay"
	echo "  Of that colossal wreck, boundless and bare"
	echo "  The lone and level sands stretch far away."
	echo ""
else
	echo "                           ."
	echo "                          \":\""
	echo "                        ___:____     |\"\\/\"|"
	echo "                      ,'        \`.    \\  /"
	echo "                      |  o        \\___/  |"
	echo "                    ~^~^~^~^~^~^~^~^~^~^~^~^~"
	echo ""
	echo "                           (fail whale)"
	echo ""
	echo "Note: The fail whale is friendly and adorable! He is not here to"
	echo "      demoralize you, but rather, to bring you comfort and joy"
	echo "      in your time of need. \"Keep plugging away,\" he says! \"You"
	echo "      can do this!\""
	echo ""
fi
